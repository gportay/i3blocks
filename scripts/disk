#!/bin/bash
#
# disk - mock up the disk module from i3status.
# Copyright (C) 2018  GaÃ«l PORTAY
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

IEC_SYMBOLS=("" "Ki" "Mi" "Gi" "Ti")
SI_SYMBOLS=("" "k" "M" "G" "T")
CUSTOM_SYMBOLS=("" "K" "M" "G" "T")

# human_readable(numeric_value, divisor, symbols...)
# Echoes a human readable string and return 0.
human_readable() {
	local value div
	value="$1" && shift
	div="$1" && shift

	value="$((value*10))" # mult by 10 for decimal
	for unit in "$@"
	do
		value="$((value/div))"
		if [[ "$value" -lt "$((div*10))" ]] # mult by 10 for decimal
		then
			break
		fi
	done

	# echo value with decimal dot and unit
	echo "${value:0:${#value}-1}.${value:${#value}-1:1} ${unit}B"
}

# below_threshold()
# Return 1 if threshold is reached, 0 otherwise.
below_threshold() {
	local value threshold

	case "$threshold_type" in
	percentage_free|percentage_avail)
		eval "$(echo value=\$_$threshold_type)"
		;;
	bytes_free|bytes_avail)
		eval "$(echo value=\$_${threshold_type#bytes_*})"
		;;
	esac

	echo "$value < $low_threshold" | bc | grep -q 1
}

# Required a single argument
if [ $# -ne 1 ]
then
	cat <<EOF
Usage: ${0##*/} MOUNT_POINT

For a more thorough description, please refers to i3-status man page.

EOF
	exit 1
fi >&2

# Setup default values
format="${format:-%free}"
format_below_threshold="${format_below_threshold:-$format}"
format_not_mounted="${format_not_mounted:-}"
prefix_type="${prefix_type:-binary}"
threshold_type="${threshold_type:-percentage_avail}"
low_threshold="${low_threshold:-0}"

case "$prefix_type" in
binary)
	div=1024
	symbols=("${IEC_SYMBOLS[@]}")
	;;
decimal)
	div=1000
	symbols=("${SI_SYMBOLS[@]}")
	;;
custom)
	div=1024
	symbols=("${CUSTOM_SYMBOLS[@]}")
	;;
esac

# If not mounted, exit early
if ! mountpoint -q "$1"
then
	echo "$format_not_mounted"
	exit
fi

# Get total, avail and free amount from stat and deduce used from total and free
eval "$(stat -fc '_total=$((%b * %S * 1024)); _avail=$((%a * %S* 1024)); _free=$((%f * %S* 1024)); _used=$((_total-_free));' "$1")"

# ... and calculate percentages
_percentage_used="$(echo  "scale=1; $_used  * 100 / $_total" | bc)"
_percentage_free="$(echo  "scale=1; $_free  * 100 / $_total" | bc)"
_percentage_avail="$(echo "scale=1; $_avail * 100 / $_total" | bc)"
_percentage_used_of_avail="$(echo "scale=1; 100.0 - ($_avail * 100 / $_total)" | bc)"

# Compute all placeholders values
total="$(human_readable "$_total" "$div" "${symbols[@]}")"
free="$(human_readable  "$_free"  "$div" "${symbols[@]}")"
avail="$(human_readable "$_avail" "$div" "${symbols[@]}")"
used="$(human_readable  "$_used"  "$div" "${symbols[@]}")"
percentage_used="$_percentage_used%"
percentage_free="$_percentage_free%"
percentage_avail="$_percentage_avail%"
percentage_used_of_avail="$_percentage_used_of_avail%"

# Check for threshold to update formatted string
fmt="$format"
if below_threshold
then
	threehold=true
	fmt="$format_below_threshold"
fi

# Update full and short texts
eval "$(echo "echo \"${fmt//%/$}\"")"

# Update text color if threshold is reached
if [[ $threehold ]]
then
	echo
	echo "#ff0000"
fi
